name: PR Validation - Fast Unit Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
    paths:
      - 'Vocorize/**'
      - 'VocorizeTests/**'
      - 'Vocorize.xcodeproj/**'
      - 'Resources/**'
      - '*.swift'
      - 'Package.swift'
      - 'Package.resolved'

  # Allow manual triggering for testing
  workflow_dispatch:

# Cancel in-progress runs for PR updates
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer
  # Fast feedback environment
  VOCORIZE_TEST_MODE: unit
  # Disable model downloads for unit tests
  VOCORIZE_SKIP_MODEL_DOWNLOADS: true
  # Use mock providers exclusively
  VOCORIZE_MOCK_PROVIDERS_ONLY: true

jobs:
  fast-validation:
    name: Fast Unit Tests & Build
    runs-on: macos-14
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
      
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Resolve Package Dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project Vocorize.xcodeproj
        
    - name: Build Application
      run: |
        set -o pipefail
        xcodebuild clean build \
          -project Vocorize.xcodeproj \
          -scheme Vocorize \
          -destination 'platform=macOS,arch=arm64' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty --color --report junit --output build-results.xml
          
    - name: Run Unit Tests Only
      run: |
        set -o pipefail
        # Run only unit tests (excluding integration tests)
        xcodebuild test \
          -project Vocorize.xcodeproj \
          -scheme Vocorize \
          -destination 'platform=macOS,arch=arm64' \
          -only-testing:VocorizeTests/VocorizeTests \
          -only-testing:VocorizeTests/WhisperKitProviderTests \
          -only-testing:VocorizeTests/TranscriptionProviderTests \
          -only-testing:VocorizeTests/TranscriptionClientProviderTests \
          -only-testing:VocorizeTests/ModelConfigurationTests \
          -only-testing:VocorizeTests/MLXProviderRegistrationTests \
          -only-testing:VocorizeTests/MLXAvailabilityTests \
          -only-testing:VocorizeTests/TranscriptionProviderFactoryTests \
          -test-timeouts-enabled NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty --color --report junit --output test-results.xml
          
    - name: SwiftLint
      run: |
        # Install swiftlint if not present
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        swiftlint --strict --reporter github-actions-logging
        
    - name: Check for Performance Regressions
      run: |
        # Verify unit tests completed within performance target
        if grep -q "Unit test performance" test_output.log; then
          echo "‚úÖ Unit test performance metrics found"
          grep "Unit test performance" test_output.log
        else
          echo "‚ö†Ô∏è No performance metrics found in test output"
        fi
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-results
        path: |
          test-results.xml
          build-results.xml
          test_output.log
        retention-days: 7
        
    - name: Comment PR with Results
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          let comment = '## üöÄ PR Validation Results\n\n';
          
          // Check if test results exist
          if (fs.existsSync('test-results.xml')) {
            comment += '‚úÖ Unit tests completed successfully\n';
            comment += '‚ö° Fast feedback pipeline: < 2 minutes\n\n';
          } else {
            comment += '‚ùå Unit tests failed\n\n';
          }
          
          comment += '### Test Coverage\n';
          comment += '- ‚úÖ Core hotkey processing logic\n';
          comment += '- ‚úÖ WhisperKit provider unit tests (mocked)\n';
          comment += '- ‚úÖ Transcription client tests\n';
          comment += '- ‚úÖ Model configuration validation\n';
          comment += '- ‚úÖ MLX provider registration\n\n';
          
          comment += '### Next Steps\n';
          comment += '- Integration tests will run on merge to main\n';
          comment += '- Full validation runs nightly\n';
          comment += '- Performance benchmarks on release branches\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });